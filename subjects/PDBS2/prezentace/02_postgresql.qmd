---
title: "PostgreSQL (Postgis)"
subtitle: "Prostorové databázové systémy 2"
author: "Jan Caha"
date: 2024-03-04
date-format: "YYYY-MM-DD"
format: 
    revealjs:
        theme: [../../reveal-custom.scss]
footer: "{{< var links.web >}}"
code-line-numbers: false
execute:
  echo: true
  eval: true
---

## Připojení a práce s DB

- buď přes specializovaného klienta [PGAdmin](https://www.pgadmin.org/download/)
- nebo přes obecné klienty k databázím (např. [DBeaver](https://dbeaver.io/) a řada dalších)
- přes programovací jazyky - [Python]{.software} (knihovna [Psycopg]{.software}), [R]{.software}(knihovny [RPostgres]{.software} a [dbplyr]{.software})
- některé IDE mají extenze pro DB
- jednoúčelové nástroje - např. [ogr2ogr]{.software} z [GDAL/OGR]{.software}
- příkazová řádka
  
## SQL

- odlišný od programovacích jazyků
- popisujeme výsledek, ne process jak se k němu dostat
- založený na výrazech (`SELECT, INSERT, UPDATE, DROP, ALTER`...)
- variace pro různé druhy - [MySQL]{.software} ([MariaDB]{.software}), [PostgreSQL]{.software}, [SQLite]{.software} atd.

::: {.callout-warning}
Dokumentace !!!
:::

## PostgreSQL

- v oblasti "větších" databází aktuálně standard - u lehkých databází převládá MySQL nebo SQLite
- řada variací a forků - HadoopDB, Postgres Pro Enterprise, Red Hat Database, Redshift, Yahoo! Everest
- extenze - funkcionalita a nové typy dat (např. geodata - PostGIS)
- vhodné sledovat vývoj, v poslední době dost výrazné změny zejména v rychlosti

## Import Export dat

- buď SQL soubory
- nebo tvorba tabulky a import CSV (pozor na práva, ne všude může databáze číst - využíváme případně adresář `/tmp`)
- nebo přes programovací jazyky či komplexnější nástroje - Python, R, DB software, GDAL/OGR

# Příklady - import data z CSV, pomocí GDAL/OGR

## Konstrukce WITH

- dočasné tabulky pro dotazy
- lze je i zanořovat do sebe

```SQL
WITH nazev_tabulky AS (
  SELECT ...
)
```

- tabulku pak dále použijeme např. v `JOIN`

# Příklad - `JOIN` s dočasnou tabulkou

## VIEW

- pohled na data
- reálně neexistující tabulka, která se vytváří na požádání z dat
- updatuje se v podstatě v reálném čase
- užitečné proti duplikacím dat
- může být náročné na čas

# Příklad - `VIEW` prostorvých dat s transformací souřadnicového systému

## Připojení a práce přes QGIS

- možnost připojit data přímo do QGIS
- včetně editace dat
- ukládání do DB

# Příklad - připojení dat s PostgreSQL do QGIS
  
## PostGIS

- extenze [PostgreSQL]{.software} pro prostorová data
- stojí na knihovnách [PROJ]{.software}, [GDAL/OGR]{.software}, [GEOS]{.software} a dalších
- geometrické typy `geometry` (častější) a `geography` (novější)
- funkce `ST_*`, **spatio-temporal**
- informace o tabulkách s geometriemi ve **Views**
- [manuál](https://postgis.net/docs/manual-3.4/)
  
## Data

- obvykle vektorová 
- lze i rastry, ale to má relativně malé přínosy a výrazně to zvětšuje DB
- rastry se často ukládají mimo a z DB se pouze referencují, tím se nezvětšuje velikost DB ale lze používat funkce
- funkce pro oba typy data existují

## Seznamy funkce

- [vektorová data](https://postgis.net/docs/manual-3.4/reference.html)
- [rastrová data](https://postgis.net/docs/manual-3.4/RT_reference.html)
- [prostorové dotazy](https://postgis.net/docs/manual-3.4/using_postgis_query.html)

## Souřadnicové systémy

- ukládají se tabulky `spatial_ref_sys` ve schématu `public` při instalaci extenze do DB
- bez této tabulky nemusí PostGIS fungovat korektně
- do tabulky nezasahovat, leda skrze funkce PostGIS, jinak je možné způsobit nefunkčnost extenze
- integerový identfikátor `srid` obvykle odpovídá **EPSG** kódu, `EPSG:5514` - `5514`

# Dotazy ???